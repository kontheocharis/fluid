data Nat : Type where
  | Z : Nat
  | S : Nat -> Nat

data List : Type -> Type where
  | LNil  : (a : Type) -> List a
  | LCons : (a : Type) -> a -> List a -> List a

data Fin : Nat -> Type where
  | FZ : (n : Nat) -> Fin (S n)
  | FS : (n : Nat) -> Fin n -> Fin (S n)

data Bool : Type where
  | True  : Bool
  | False : Bool

data Maybe : Type -> Type where
  | Nothing : (a : Type) -> Maybe a
  | Just    : (a : Type) -> a -> Maybe a

data Eq : (a : Type) -> a -> a -> Type where
  | Refl : (a : Type) -> (x : a) -> Eq a x x

data LTE : Nat -> Nat -> Type where
  | LTEZero : (n : Nat) -> LTE Z n
  | LTESucc : (n : Nat) -> (m : Nat) -> LTE n m -> LTE (S n) (S m)

data Vect : Nat -> Type -> Type where
  | VNil  : (a : Type) -> Vect Z a
  | VCons : (n : Nat) -> (a : Type) -> a -> Vect n a -> Vect (S n) a
