data V : Type where
  | MkV : (n1 : Nat) -> V

data Elem : (n17 : V) -> (n18 : List V) -> Type where
  | Here : (x : V) -> (xs : List V) -> Elem x (x::xs)
  | There : (x : V) -> (xs : List V) -> (n25 : Elem x xs) -> (y : V) -> Elem x (y::xs)

data Unzip : (n14 : List ((n15 : V) ** Nat)) -> (n16 : List V) -> (n17 : List Nat) -> Type where
  | NilUZ : Unzip [] [] []
  | ConsUZ : (x : V) -> (y : Nat) -> (xs : List ((n22 : V) ** Nat)) -> (vs : List V) -> (ws : List Nat) -> (n25 : Unzip xs vs ws) -> Unzip ((x, y)::xs) (x::vs) (y::ws)

data Bool : Type where
  | True : Bool
  | False : Bool

isEqual : (n27 : Nat) -> (n28 : Nat) -> Bool
isEqual Z Z = True
isEqual (S n) (S m) = isEqual n m
isEqual v38 v39 = False

plus : (n37 : Nat) -> (n38 : Nat) -> Nat
plus a Z = a
plus a (S n) = S (plus a n)

data Expr : (vars : List V) -> Type where
  | Num : (n41 : Nat) -> (numparam_1 : List V) -> Expr numparam_1
  | Var : (n43 : V) -> (varparam_1 : List V) -> (relParamV : Elem n43 varparam_1) -> Expr varparam_1
  | Add : (addparam_0 : List V) -> (n44 : Expr addparam_0) -> (n45 : Expr addparam_0) -> Expr addparam_0

lookupVar : (patV : List V) -> (x : V) -> (relParamV_funcElem : Elem x patV) -> (env : List ((n48 : V) ** Nat)) -> Maybe Nat
lookupVar (x0::x1) x (Here x0 x1) [] = Nothing
lookupVar (x0::x1) x (There x2 x3 x4 x5) [] = Nothing
lookupVar [] x (Here x6 x7) [] impossible
lookupVar [] x (There x8 x9 x10 x11) [] impossible
lookupVar (x2::x3) (MkV x) (Here x12 x13) ((MkV y, val)::ys) = Just val
lookupVar (x2::x3) (MkV x) (There x14 x15 x16 x17) ((MkV y, val)::ys) = case isEqual x y of
  | True => Just val
  | False => lookupVar x3 (MkV x) x16 ys
lookupVar [] (MkV x) (Here x18 x19) ((MkV y, val)::ys) impossible
lookupVar [] (MkV x) (There x20 x21 x22 x23) ((MkV y, val)::ys) impossible

eval : (patV1 : List Nat) -> (env : List ((n57 : V) ** Nat)) -> (evalparam_1 : List V) -> (relParamV_funcUnzip : Unzip env evalparam_1 patV1) -> (n58 : Expr evalparam_1) -> Maybe Nat
eval patV1 env patvar_1 relParam_patVUnzip (Num n patvar_1) = Just n
eval patV1 env patvar_1 relParam_patVUnzip (Var x patvar_1 vrel_1) = lookupVar ?addParamHole_x0 x ?vrel_Elem1 env
eval patV1 env paramforpatvar_Add_0 relParam_patVUnzip (Add paramforpatvar_Add_0 e1 e2) = case eval ?addParamHole_env0 env paramforpatvar_Add_0 ?vrel_Unzip2 e1 of
  | Nothing => Nothing
  | (Just e1') => case eval ?addParamHole_env0 env paramforpatvar_Add_0 ?vrel_Unzip2 e2 of
    | (Just e2') => Just (plus e1' e2')
    | Nothing => Nothing
