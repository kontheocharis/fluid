data V : Type where
  | MkV : (n1 : Nat) -> V

data Elem : (n17 : V) -> (n18 : List V) -> Type where
  | Here : (x : V) -> (xs : List V) -> Elem x (x::xs)
  | There : (x : V) -> (xs : List V) -> (n25 : Elem x xs) -> (y : V) -> Elem x (y::xs)

data Unzip : (n14 : List ((n15 : V) ** Nat)) -> (n16 : List V) -> (n17 : List Nat) -> Type where
  | NilUZ : Unzip [] [] []
  | ConsUZ : (x : V) -> (y : Nat) -> (xs : List ((n22 : V) ** Nat)) -> (vs : List V) -> (ws : List Nat) -> (n25 : Unzip xs vs ws) -> Unzip ((x, y)::xs) (x::vs) (y::ws)

data Bool : Type where
  | True : Bool
  | False : Bool

isEqual : (n27 : Nat) -> (n28 : Nat) -> Bool
isEqual Z Z = True
isEqual (S n) (S m) = isEqual n m
isEqual v38 v39 = False

plus : (n37 : Nat) -> (n38 : Nat) -> Nat
plus a Z = a
plus a (S n) = S (plus a n)

data Expr : (vars : List V) -> Type where
  | Num : (n41 : Nat) -> (numparam_1 : List V) -> Expr numparam_1
  | Var : (n43 : V) -> (varparam_1 : List V) -> (relParamV : Elem n43 varparam_1) -> Expr varparam_1
  | Add : (addparam_0 : List V) -> (n44 : Expr addparam_0) -> (n45 : Expr addparam_0) -> Expr addparam_0

lookupVar : (patV : List V) -> (x : V) -> (relParamV_funcElem : Elem x patV) -> (env : List ((n48 : V) ** Nat)) -> Maybe Nat
lookupVar (x0::x1) x (Here x0 x1) [] = Nothing
lookupVar (x0::x1) x (There x2 x3 x4 x5) [] = Nothing
lookupVar [] x (Here x6 x7) [] impossible
lookupVar [] x (There x8 x9 x10 x11) [] impossible
lookupVar (x2::x3) (MkV x) (Here x12 x13) ((MkV y, val)::ys) = Just val
lookupVar (x2::x3) (MkV x) (There x14 x15 x16 x17) ((MkV y, val)::ys) = case isEqual x y of
  | True => Just val
  | False => lookupVar x3 (MkV x) x16 ys
lookupVar [] (MkV x) (Here x18 x19) ((MkV y, val)::ys) impossible
lookupVar [] (MkV x) (There x20 x21 x22 x23) ((MkV y, val)::ys) impossible

eval : (patV1 : List Nat) -> (env : List ((n57 : V) ** Nat)) -> (evalparam_1 : List V) -> (relParamV_funcUnzip : Unzip env evalparam_1 patV1) -> (n58 : Expr evalparam_1) -> Maybe Nat
eval (x0::x1) (x0::x1) patvar_1 relParam_patVUnzip (Num n patvar_1) impossible
eval (x0::x1) [] (x0::x1) relParam_patVUnzip (Num n (x0::x1)) impossible
eval (x0::x1) [] [] NilUZ (Num n []) impossible
eval (x0::x1) [] [] (ConsUZ x0 x1 x2 x3 x4 x5) (Num n []) impossible
eval [] (x2::x3) (x2::x3) relParam_patVUnzip (Num n (x2::x3)) impossible
eval [] (x2::x3) [] NilUZ (Num n []) impossible
eval [] (x2::x3) [] (ConsUZ x6 x7 x8 x9 x10 x11) (Num n []) impossible
eval [] [] (x4::x5) NilUZ (Num n (x4::x5)) impossible
eval [] [] (x4::x5) (ConsUZ x12 x13 x14 x15 x16 x17) (Num n (x4::x5)) impossible
eval [] [] [] NilUZ (Num n []) = Just n
eval [] [] [] (ConsUZ x18 x19 x20 x21 x22 x23) (Num n []) impossible
eval (x2::x3) (x4::x5) (x6::x7) NilUZ (Var x (x6::x7) vrel_1) impossible
eval (x2::x3) ((x0, x1)::x5) (x6::x7) (ConsUZ x24 x25 x26 x27 x28 x29) (Var x (x6::x7) (Here p0 p1)) = lookupVar ?addParamHole_x0 x ?vrel_Elem1 ((x0, x1)::x5)
eval (x2::x3) ((x0, x1)::x5) (x6::x7) (ConsUZ x24 x25 x26 x27 x28 x29) (Var x (x6::x7) (There p2 p3 p4 p5)) = lookupVar ?addParamHole_x0 x ?vrel_Elem1 ((x0, x1)::x5)
eval (x2::x3) (x4::x5) [] NilUZ (Var x [] vrel_1) impossible
eval (x2::x3) (x4::x5) [] (ConsUZ x30 x31 x32 x33 x34 x35) (Var x [] vrel_1) impossible
eval (x2::x3) [] (x8::x9) NilUZ (Var x (x8::x9) vrel_1) impossible
eval (x2::x3) [] (x8::x9) (ConsUZ x36 x37 x38 x39 x40 x41) (Var x (x8::x9) vrel_1) impossible
eval (x2::x3) [] [] NilUZ (Var x [] vrel_1) impossible
eval (x2::x3) [] [] (ConsUZ x42 x43 x44 x45 x46 x47) (Var x [] vrel_1) impossible
eval [] (x6::x7) (x10::x11) NilUZ (Var x (x10::x11) vrel_1) impossible
eval [] (x6::x7) (x10::x11) (ConsUZ x48 x49 x50 x51 x52 x53) (Var x (x10::x11) vrel_1) impossible
eval [] (x6::x7) [] NilUZ (Var x [] vrel_1) impossible
eval [] (x6::x7) [] (ConsUZ x54 x55 x56 x57 x58 x59) (Var x [] vrel_1) impossible
eval [] [] (x12::x13) NilUZ (Var x (x12::x13) vrel_1) impossible
eval [] [] (x12::x13) (ConsUZ x60 x61 x62 x63 x64 x65) (Var x (x12::x13) vrel_1) impossible
eval [] [] [] NilUZ (Var x [] vrel_1) = lookupVar ?addParamHole_x0 x ?vrel_Elem1 []
eval [] [] [] (ConsUZ x66 x67 x68 x69 x70 x71) (Var x [] vrel_1) impossible
eval (x4::x5) (x8::x9) (x14::x15) NilUZ (Add (x14::x15) e1 e2) impossible
eval (x4::x5) (x8::x9) (x14::x15) (ConsUZ x72 x73 x74 x75 x76 x77) (Add (x14::x15) e1 e2) = case eval ?addParamHole_env0 (x8::x9) (x14::x15) ?vrel_Unzip2 e1 of
  | Nothing => Nothing
  | (Just e1') => case eval ?addParamHole_env0 (x8::x9) (x14::x15) ?vrel_Unzip2 e2 of
    | (Just e2') => Just (plus e1' e2')
    | Nothing => Nothing
eval (x4::x5) (x8::x9) [] NilUZ (Add [] e1 e2) impossible
eval (x4::x5) (x8::x9) [] (ConsUZ x78 x79 x80 x81 x82 x83) (Add [] e1 e2) impossible
eval (x4::x5) [] (x16::x17) NilUZ (Add (x16::x17) e1 e2) impossible
eval (x4::x5) [] (x16::x17) (ConsUZ x84 x85 x86 x87 x88 x89) (Add (x16::x17) e1 e2) impossible
eval (x4::x5) [] [] NilUZ (Add [] e1 e2) impossible
eval (x4::x5) [] [] (ConsUZ x90 x91 x92 x93 x94 x95) (Add [] e1 e2) impossible
eval [] (x10::x11) (x18::x19) NilUZ (Add (x18::x19) e1 e2) impossible
eval [] (x10::x11) (x18::x19) (ConsUZ x96 x97 (ConsUZ x96 x97 x98 x99 x100 x101) x99 x100 x101) (Add (x18::x19) e1 e2) impossible
eval [] (x10::x11) [] NilUZ (Add [] e1 e2) impossible
eval [] (x10::x11) [] (ConsUZ x102 x103 x104 x105 x106 x107) (Add [] e1 e2) impossible
eval [] [] (x20::x21) NilUZ (Add (x20::x21) e1 e2) impossible
eval [] [] (x20::x21) (ConsUZ x108 x109 x110 x111 x112 x113) (Add (x20::x21) e1 e2) impossible
eval [] [] [] NilUZ (Add [] e1 e2) = case eval ?addParamHole_env0 [] [] ?vrel_Unzip2 e1 of
  | Nothing => Nothing
  | (Just e1') => case eval ?addParamHole_env0 [] [] ?vrel_Unzip2 e2 of
    | (Just e2') => Just (plus e1' e2')
    | Nothing => Nothing
eval [] [] [] (ConsUZ x114 x115 x116 x117 x118 x119) (Add [] e1 e2) impossible
