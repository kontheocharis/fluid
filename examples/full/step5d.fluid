data V : Type where
  | MkV : (n1 : Nat) -> V

data Elem : (n17 : V) -> (n18 : List V) -> Type where
  | Here : (x : V) -> (xs : List V) -> Elem x (x::xs)
  | There : (x : V) -> (xs : List V) -> (n25 : Elem x xs) -> (y : V) -> Elem x (y::xs)

data Unzip : (n14 : List ((n15 : V) ** Nat)) -> (n16 : List V) -> (n17 : List Nat) -> Type where
  | NilUZ : Unzip [] [] []
  | ConsUZ : (x : V) -> (y : Nat) -> (xs : List ((n22 : V) ** Nat)) -> (vs : List V) -> (ws : List Nat) -> (n25 : Unzip xs vs ws) -> Unzip ((x, y)::xs) (x::vs) (y::ws)

data Bool : Type where
  | True : Bool
  | False : Bool

isEqual : (n15 : Nat) -> (n16 : Nat) -> Bool
isEqual Z Z = True
isEqual (S n) (S m) = isEqual n m
isEqual v14 v15 = False

plus : (n25 : Nat) -> (n26 : Nat) -> Nat
plus a Z = a
plus a (S n) = S (plus a n)

data Expr : (newInd0 : List V) -> Type where
  | Num : (n29 : Nat) -> (numparam_1 : List V) -> Expr numparam_1
  | Var : (n31 : V) -> (varparam_1 : List V) -> (relParamV : Elem n31 varparam_1) -> Expr varparam_1
  | Add : (addparam_0 : List V) -> (n32 : Expr addparam_0) -> (n33 : Expr addparam_0) -> Expr addparam_0

lookupVar : (newParamV : List V) -> (x : V) -> (relParamV_func : Elem x newParamV) -> (env : List ((n36 : V) ** Nat)) -> Maybe Nat
lookupVar [] x (Here y ys) [] impossible
lookupVar [] x (There y ys el z) [] impossible
lookupVar (x::xs) x (Here y ys) [] = Nothing
lookupVar (x::xs) x (There y ys el z) [] = Nothing
lookupVar patV (MkV x) relParam_patV ((MkV y, val)::ys) = case isEqual x y of
  | True => Just val
  | False => lookupVar patV (MkV x) relParam_patV ys

eval : (newParamV : List Nat) -> (env : List ((n45 : V) ** Nat)) -> (evalparam_1 : List V) -> (relParamV_func : Unzip env evalparam_1 newParamV) -> (n46 : Expr evalparam_1) -> Maybe Nat
eval patV env patvar_1 relParam_patV (Num n patvar_1) = Just n
eval [] [] [] NilUZ (Var x [] (Here p ps)) impossible
eval [] [] [] NilUZ (Var x (x'::xs') (There p ps el z)) impossible
eval (y::ys) ((x, y)::env) (x::vars) (ConsUZ v100 v101 v102 v103 v104 v105) (Var x (x::vars) (Here p ps)) = lookupVar ?addParamHole_x0 x ?vrel_1 ((x, y)::env)
eval (y::ys) ((x, y)::env) (x::vars) (ConsUZ v134 v135 v136 v137 v138 v139) (Var x (x::vars) (There p ps el z)) = lookupVar ?addParamHole_x0 x ?vrel_1 ((x, y)::env)
eval patV env paramforpatvar_Add_0 relParam_patV (Add paramforpatvar_Add_0 e1 e2) = case eval ?addParamHole_env0 env paramforpatvar_Add_0 ?unzip1 e1 of
  | (Just e1') => case eval ?addParamHole_env0 env paramforpatvar_Add_0 ?unzip2 e2 of
    | (Just e2') => Just (plus e1' e2')
    | Nothing => Nothing
    | Nothing => Nothing
