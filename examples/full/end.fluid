data V : Type where
  | MkV : (n1 : Nat) -> V

data Elem : (n17 : V) -> (n18 : List V) -> Type where
  | Here : (x : V) -> (xs : List V) -> Elem x (x::xs)
  | There : (x : V) -> (xs : List V) -> (n25 : Elem x xs) -> (y : V) -> Elem x (y::xs)

data Unzip : (n14 : List ((n15 : V) ** Nat)) -> (n16 : List V) -> (n17 : List Nat) -> Type where
  | NilUZ : Unzip [] [] []
  | ConsUZ : (x : V) -> (y : Nat) -> (xs : List ((n22 : V) ** Nat)) -> (vs : List V) -> (ws : List Nat) -> (n25 : Unzip xs vs ws) -> Unzip ((x, y)::xs) (x::vs) (y::ws)

data Bool : Type where
  | True : Bool
  | False : Bool

isEqual : (n15 : Nat) -> (n16 : Nat) -> Bool
isEqual Z Z = True
isEqual (S n) (S m) = isEqual n m
isEqual v14 v15 = False

plus : (n25 : Nat) -> (n26 : Nat) -> Nat
plus a Z = a
plus a (S n) = S (plus a n)

data Expr : (newInd0 : List V) -> Type where
  | Num : (n29 : Nat) -> (numparam_1 : List V) -> Expr numparam_1
  | Var : (n31 : V) -> (varparam_1 : List V) -> (relParamV : Elem n31 varparam_1) -> Expr varparam_1
  | Add : (addparam_0 : List V) -> (n32 : Expr addparam_0) -> (n33 : Expr addparam_0) -> Expr addparam_0

lookupVar : (patV2 : List Nat) -> (newParamV : List V) -> (x : V) -> (relParamV_func : Elem x newParamV) -> (env : List ((n48 : V) ** Nat)) -> (relParamV_funcUnzip : Unzip env newParamV patV2) -> Nat
lookupVar patV2 [] x (Here y ys) [] relParam_patVUnzip impossible
lookupVar patV2 [] x (There y ys el z) [] relParam_patVUnzip impossible
lookupVar patV2 (x::xs) x (Here y ys) [] NilUZ impossible
lookupVar patV2 (x::xs) x (Here y ys) [] (ConsUZ _ _ _ _ _ _) impossible
lookupVar patV2 (x::xs) x (There y ys el z) [] NilUZ impossible
lookupVar patV2 (x::xs) x (There y ys el z) [] (ConsUZ _ _ _ _ _ _) impossible
lookupVar patV2 [] (MkV x) (Here _ _) ((MkV y, val)::ys) relParam_patVUnzip impossible
lookupVar patV2 (p::ps) (MkV x) (Here v72 v73) ((MkV y, val)::ys) NilUZ impossible
lookupVar patV2 (p::ps) (MkV x) (Here v72 v73) ((MkV y, val)::ys) (ConsUZ v111 v112 v113 v114 v115 v116) = val
lookupVar patV2 [] (MkV x) (There _ _ _ _) ((MkV y, val)::ys) relParam_patVUnzip impossible
lookupVar [] (p::ps) (MkV x) (There v100 v101 v102 v103) ((MkV y, val)::ys) NilUZ impossible
lookupVar [] (p::ps) (MkV x) (There v100 v101 v102 v103) ((MkV y, val)::ys) (ConsUZ _ _ _ _ _ _) impossible
lookupVar (v::patV2) (p::ps) (MkV x) (There v100 v101 v102 v103) ((MkV y, val)::ys) NilUZ impossible
lookupVar (v::patV2) (p::ps) (MkV x) (There v100 v101 v102 v103) ((MkV y, val)::ys) (ConsUZ v184 v185 v186 v187 v188 v189) = lookupVar patV2 ps (MkV x) v102 ys v189

eval : (newParamV : List Nat) -> (env : List ((n45 : V) ** Nat)) -> (evalparam_1 : List V) -> (relParamV_func : Unzip env evalparam_1 newParamV) -> (n46 : Expr evalparam_1) -> Nat
eval patV env patvar_1 relParam_patV (Num n patvar_1) = n
eval [] [] [] NilUZ (Var x [] (Here p ps)) impossible
eval [] [] [] NilUZ (Var x (x'::xs') (There p ps el z)) impossible
eval (y::ys) ((x, y)::env) (x::vars) (ConsUZ v100 v101 v102 v103 v104 v105) (Var x (x::vars) (Here p ps)) = lookupVar (y::ys) (x::vars) x (Here p ps) ((x, y)::env) (ConsUZ v100 v101 v102 v103 v104 v105)
eval (y::ys) ((x, y)::env) (x::vars) (ConsUZ v134 v135 v136 v137 v138 v139) (Var x (x::vars) (There p ps el z)) = lookupVar (y::ys) (x::vars) x (There p ps el z) ((x, y)::env) (ConsUZ v134 v135 v136 v137 v138 v139)
eval patV env paramforpatvar_Add_0 relParam_patV (Add paramforpatvar_Add_0 e1 e2) = case eval patV env paramforpatvar_Add_0 relParam_patV e1 of
  | e1' => case eval patV env paramforpatvar_Add_0 relParam_patV e2 of
    | e2' => plus e1' e2'
