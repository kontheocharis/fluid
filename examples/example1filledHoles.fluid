plus : (n0 : Nat) -> (n2 : Nat) -> Nat
plus n Z = n
plus n (S m) = S (plus n m)

data Bool : Type where
  | True : Bool
  | False : Bool

isEqual : (n10 : Nat) -> (n11 : Nat) -> Bool
isEqual Z Z = True
isEqual Z (S y) = False
isEqual (S x) Z = False
isEqual (S x) (S y) = isEqual x y

data Expr : (newInd0 : List Nat) -> Type where
  | Num : (n17 : Nat) -> (numparam_1 : List Nat) -> Expr numparam_1
  | Var : (n19 : Nat) -> (varparam_1 : List Nat) -> Expr varparam_1
  | Add : (addparam_0 : List Nat) -> (n20 : Expr addparam_0) -> (addparam_2 : List Nat) -> (n21 : Expr addparam_2) -> (addparam_4 : List Nat) -> Expr addparam_4

lookUpVar : (x : Nat) -> (env : List ((n25 : Nat) ** Nat)) -> Maybe Nat
lookUpVar x [] = Nothing
lookUpVar x ((y, val)::ys) = case isEqual x y of
  | True => Just val
  | False => lookUpVar x ys

eval : (env : List ((n33 : Nat) ** Nat)) -> (evalparam_1 : List Nat) -> (n34 : Expr evalparam_1) -> Maybe Nat
eval env patvar_1 (Num n patvar_1) = Just n
eval env patvar_1 (Var x patvar_1) = lookUpVar x env
eval env patvar_1 (Add paramforpatvar_Add_0 e1 paramforpatvar_Add_2 e2 patvar_1) = case eval env paramforpatvar_Add_0 e1 of
  | Nothing => Nothing
  | (Just e1') => case eval env paramforpatvar_Add_2 e2 of
    | Nothing => Nothing
    | (Just e2') => Just (plus e1' e2')

