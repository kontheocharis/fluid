plus: Nat -> Nat -> Nat 
plus n Z = n 
plus n (S m) = S (plus n m)

data Bool: Type where 
    | True : Bool
    | False : Bool

isEqual: Nat -> Nat -> Bool
isEqual Z Z = True
isEqual Z (S y) = False
isEqual (S x) Z = False
isEqual (S x) (S y) = isEqual x y


data Expr : Type  where
    | Num : Nat -> Expr
    | Var : Nat -> Expr 
    | Add : Expr -> Expr -> Expr 

lookUpVar: (x:Nat) -> (env: List (Nat ** Nat)) -> Maybe Nat
lookUpVar x [] = Nothing 
lookUpVar x ((y,val)::ys) = case (isEqual x y) of 
                                | True => Just val 
                                | False => lookUpVar x ys
        
        
eval: (env: List (Nat ** Nat)) -> Expr -> Maybe Nat 
eval env (Num n) = Just n
eval env (Var x) = lookUpVar x env
eval env (Add e1 e2) = case (eval env e1) of 
                            | Nothing => Nothing
                            | (Just e1') => case (eval env e2) of 
                                | Nothing => Nothing 
                                | (Just e2') => Just (plus e1' e2')
         



